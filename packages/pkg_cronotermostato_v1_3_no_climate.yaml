homeassistant:
  customize:
    package.node_anchors:
      customize: &customize
        Package:: Cronotermostato
        Version:: 1.3.1
        Author:: MARIO @tlod80


    ##--------------------- IMPOSTAZIONI DEL PACKAGE ---------------------##
      setting:
        Tracker: &tracker 'device_tracker.tracker'                #sostituire con il tracker
        Zona_casa: &zona 'home'                                   #se non si hanno le zone lasciare 'home'
        Servizio Notifica: &servizio 'notify.telegram'            #sostituire con il servizio di notifica
        Climate: &termostato 'climate.termostato'                 #sostituire con il prorio climate
    ##---------------------                           ---------------------##


#Le modalità del termostato:
# OFF: termostato spento
# AUTO: il termostato si accende in base agli orari impostati se si è in casa
# MANUALE: termostato acceso. Non tiene conto di orari e posizione
# ECO: abbassa la temperatura ma comuque rimane acceso, ideale per la notte
# PRERISCALDAMENTO: il termostato si accende all'ora impostata anche quando si è lontani da casa

input_select:
  modalita_termostato:
    options:
      - "OFF"
      - "AUTO"
      - "MANUALE"
      - "ECO"
      - "PRERISCALDAMENTO"


#Serve per tenere traccia quando si passa in automatico alla modalià ECO
#in modo da ritornare alla modalità precedente

  modalita_old:
    options:
      - "OFF"
      - "AUTO"
      - "MANUALE"
      - "ECO"
      - "PRERISCALDAMENTO"
#Questo input_select seve per le visualizzazioni in lovelace
  visualizzazione:
    options:
      - "TERMOSTATO"
      - "ORARIO"
      - "ECO"

  modalita_trk:
    options:
      - "SPEGNIMENTO"
      - "ECO"

input_datetime:
  orario_accensione_term:
    has_date: false
    has_time: true
  orario_spegnimento_term:
    has_date: false
    has_time: true
  orario_accensione_term2:
    has_date: false
    has_time: true
  orario_spegnimento_term2:
    has_date: false
    has_time: true
  orario_accensione_term3:
    has_date: false
    has_time: true
  orario_spegnimento_term3:
    has_date: false
    has_time: true
  orario_accensione_eco_term:
    has_date: false
    has_time: true
  orario_spegnimento_eco_term:
    has_date: false
    has_time: true

input_boolean:
  accensione2:
  accensione3:

input_text:
  casella_vuota:
    initial: ' '

input_number:
  temperatura_termostato:
    min: 18
    max: 24
    step: 0.5
    unit_of_measurement: °C

  temperatura_termostato_old:
    min: 18
    max: 24
    step: 0.5

  temperatura_eco:
    min: 18
    max: 24
    step: 0.5


sensor:
  - platform: time_date
    display_options:
      - 'time'

  - platform: template
    sensors:
      temperatura_attuale:
        friendly_name: "temperatura attuale"
        value_template: "{{ state_attr('*termostato', 'current_temperature') }}"
        unit_of_measurement: °C

  - platform: attributes
    friendly_name: "interruttore_caldaia"
    attribute: hvac_action
    entities:
      - *termostato

script:
  auto:
    sequence:
      - service: climate.turn_off
        entity_id: *termostato
      - service: input_select.select_option
        data:
          entity_id: input_select.modalita_termostato
          option: AUTO

  pre:
    sequence:
      - service: climate.turn_off
        entity_id: *termostato
      - service: input_select.select_option
        data:
          entity_id: input_select.modalita_termostato
          option: PRERISCALDAMENTO

#   orario:
#     sequence:
#       - service: input_datetime.set_datetime
#         entity_id: input_datetime.orario_accensione_term
#         data_template:
#           value_template: "{{ state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom ('%H:%M',false) }}" + 1

automation:
#Modalità manuale
  - id: 'mod_manuale'
    alias: modalità manuale
    trigger:
    - entity_id: input_select.modalita_termostato
      platform: state
      to: 'MANUALE'
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_on
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: MANUALE
#Modalità off
  - id: 'mod_off'
    alias: modalità off
    trigger:
    - entity_id: input_select.modalita_termostato
      platform: state
      to: 'OFF'
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_off
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: 'OFF'
#Modalità auto
  - id: 'accensione auto'
    alias: accensione auto
    trigger:
    - entity_id: input_select.modalita_termostato
      platform: state
      to: AUTO
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: *tracker
        state: *zona
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
             - condition: state
               entity_id: input_boolean.accensione3
               state: 'on'
             - condition: template
               value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
             - condition: template
               value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    action:
    - service: climate.turn_on
      data:
        entity_id: *termostato
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO

  - id: 'accensione auto2'
    alias: accensione auto orario
    trigger:
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: input_select.modalita_termostato
        state: AUTO
      - condition: state
        entity_id: *tracker
        state: *zona
      - condition: or
        conditions:
          - condition: template
            value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_on
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO

  - id: 'accensione auto rien'
    alias: accensione auto rientro
    trigger:
    - platform: state
      entity_id: *tracker
      to: *zona
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_select.modalita_termostato
          state: AUTO
        - condition: or
          conditions:
            - condition: and
              conditions:
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
            - condition: and
              conditions:
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
            - condition: and
              conditions:
                - condition: state
                  entity_id: input_boolean.accensione2
                  state: 'on'
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
            - condition: and
              conditions:
                - condition: state
                  entity_id: input_boolean.accensione2
                  state: 'on'
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
            - condition: and
              conditions:
                - condition: state
                  entity_id: input_boolean.accensione3
                  state: 'on'
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
            - condition: and
              conditions:
                - condition: state
                  entity_id: input_boolean.accensione3
                  state: 'on'
                - condition: template
                  value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
                - condition: template
                  value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_on
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO
    - service: *servizio
      data:
        title: Bentornato/a
        message: Il termostato è acceso

  - id: 'spegnimento auto'
    alias: spegnimento auto orario
    trigger:
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    condition:
    - condition: state
      entity_id: input_select.modalita_termostato
      state: AUTO
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_off
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO

  - id: 'spegnimento auto trk'
    alias: spegn auto trk
    trigger:
    - platform: state
      entity_id: *tracker
      from: *zona
    condition:
      - condition: state
        entity_id: input_select.modalita_termostato
        state: AUTO
    action:
    - service: climate.turn_off
      data:
        entity_id: *termostato
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO
    - service: *servizio
      data:
        title: TERMOSTATO SPENTO
        message: "Il termostato è stato spento. Buona giornata!"
#impostazione temperatura
  - id: 'temp term'
    alias: temperatura termostato
    trigger:
      platform: state
      entity_id: input_number.temperatura_termostato
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: *termostato
          temperature: "{{ states('input_number.temperatura_termostato') }}"
          hvac_mode: heat
#Modalità eco
  - id: 'mod eco'
    alias: modalità eco
    trigger:
      entity_id: input_select.modalita_termostato
      platform: state
      to: ECO
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.temperatura_termostato_old
          value: "{{ states('input_number.temperatura_termostato') }}"
      - service: input_number.set_value
        data_template:
          entity_id: input_number.temperatura_termostato
          value: "{{ states('input_number.temperatura_eco') }}"

  - id: 'auto eco'
    alias: modalità eco auto
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.orario_accensione_eco_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: input_select.modalita_termostato
          state: 'AUTO'
        - condition: state
          entity_id: input_select.modalita_termostato
          state: 'MANUALE'
        - condition: state
          entity_id: input_select.modalita_termostato
          state: 'PRERISCALDAMENTO'
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.temperatura_termostato_old
          value: "{{ states('input_number.temperatura_termostato') }}"
      - service: input_number.set_value
        data_template:
          entity_id: input_number.temperatura_termostato
          value: "{{ states('input_number.temperatura_eco') }}"
      - service: input_select.select_option
        data_template:
          entity_id: input_select.modalita_termostato
          option: ECO

  - id: 'pass da eco'
    alias: passaggio da ECO
    trigger:
    - entity_id: input_select.modalita_termostato
      from: ECO
      platform: state
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.temperatura_termostato
          value: "{{ states('input_number.temperatura_termostato_old') }}"

  - id: 'auto norm'
    alias: modalità normale
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.orario_spegnimento_eco_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.modalita_termostato
          option: "{{ states('input_select.modalita_old')}}"
#Modalità preriscaldamento
  - id: 'accensione pre'
    alias: preriscaldamento
    description: ''
    trigger:
    - entity_id: input_select.modalita_termostato
      platform: state
      to: PRERISCALDAMENTO
    condition:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
             - condition: state
               entity_id: input_boolean.accensione3
               state: 'on'
             - condition: template
               value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
             - condition: template
               value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"

    action:
    - data:
        entity_id: *termostato
      service: climate.turn_on
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: PRERISCALDAMENTO

  - id: 'accensione pre2'
    alias: accensione pre orario
    trigger:
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: input_select.modalita_termostato
        state: AUTO
      - condition: or
        conditions:
          - condition: template
            value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione2
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) > (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ (state_attr('input_datetime.orario_accensione_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: template
                value_template: "{{ states('sensor.time') < (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
              - condition: state
                entity_id: input_boolean.accensione3
                state: 'on'
    action:
    - data:
       entity_id: *termostato
      service: climate.turn_on
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: PRERISCALDAMENTO

  - id: 'spegnimento pre'
    alias: spegnimento pre
    trigger:
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term2', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    - platform: template
      value_template: "{{ states('sensor.time') >= (state_attr('input_datetime.orario_spegnimento_term3', 'timestamp') | int | timestamp_custom('%H:%M', false)) }}"
    condition:
    - condition: state
      entity_id: input_select.modalita_termostato
      state: PRERISCALDAMENTO
    action:
    - data:
        entity_id: *termostato
      service: climate.turn_off
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: PRERISCALDAMENTO
#messaggio
  - id: 'mess'
    alias: mess
    trigger:
    - entity_id: *termostato
      to: 'heat'
      platform: state
    action:
      - service: *servizio
        data:
          title: TERMOSTATO ACCESO
          message: >-
                  Modalità termostato {{ states.input_select.modalita_termostato.state }}

                  Temperatura casa {{ states.sensor.sonoff_10004b541f_temperature.state }} °C

                  Temperatura impostata {{ state_attr('*termostato', 'temperature') }} °C

#sincro sensore temperatura all'avvio
  - id: 'sincro temp'
    alias: sincronizzazione temperatura
    trigger:
    - event: start
      platform: homeassistant
    action:
    - service: automation.turn_off
      data:
        entity_id: automation.mess
    - service: climate.turn_on
      data:
        entity_id: *termostato
    - service: climate.turn_off
      data:
        entity_id: *termostato
    - service: input_select.select_option
      data_template:
        entity_id: input_select.modalita_termostato
        option: 'OFF'
    - service: automation.turn_on
      data:
        entity_id: automation.mess
#automazioni tracker spegnimento ed eco
  - id: 'trk eco'
    alias: passaggio ad eco in uscita
    trigger:
    - platform: state
      entity_id: *tracker
      from: *zona
    condition:
      - condition: state
        entity_id: input_select.modalita_termostato
        state: AUTO
    action:
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_termostato
        option: ECO
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO
    - service: *servizio
      data:
        title: ATTENZIONE
        message: "Il termostato è in modalità ECO. Buona giornata!"

  - id: 'accensione auto trk'
    alias: accensione auto da eco
    trigger:
    - platform: state
      entity_id: *tracker
      to: *zona
    condition:
      condition: and
      conditions:
      - condition: state
        entity_id: input_select.modalita_termostato
        state: ECO
      - condition: state
        entity_id: input_select.modalita_old
        state: AUTO
    action:
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_termostato
        option: AUTO
    - service: input_select.select_option
      data:
        entity_id: input_select.modalita_old
        option: AUTO

  - id: 'selezione trk 1'
    alias: selezione trk spegn
    trigger:
    - platform: state
      entity_id: input_select.modalita_trk
      to: SPEGNIMENTO
    action:
    - service: automation.turn_off
      entity_id: automation.accensione_auto_da_eco
    - service: automation.turn_off
      entity_id: automation.passaggio_ad_eco_in_uscita
    - service: automation.turn_on
      entity_id: automation.spegn_auto_trk
    - service: automation.turn_on
      entity_id: automation.accensione_auto_rientro

  - id: 'selezione trk 2'
    alias: selezione trk eco
    trigger:
    - platform: state
      entity_id: input_select.modalita_trk
      to: ECO
    action:
    - service: automation.turn_off
      entity_id: automation.spegn_auto_trk
    - service: automation.turn_off
      entity_id: automation.accensione_auto_rientro
    - service: automation.turn_on
      entity_id: automation.accensione_auto_da_eco
    - service: automation.turn_on
      entity_id: automation.passaggio_ad_eco_in_uscita
